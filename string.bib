
@inproceedings{landau_introducing_1986,
	location = {New York, {NY}, {USA}},
	title = {Introducing Efficient Parallelism into Approximate String Matching and a New Serial Algorithm},
	isbn = {0-89791-193-8},
	url = {http://doi.acm.org/10.1145/12130.12152},
	doi = {10.1145/12130.12152},
	series = {{STOC} '86},
	pages = {220–230},
	booktitle = {Proceedings of the Eighteenth Annual {ACM} Symposium on Theory of Computing},
	publisher = {{ACM}},
	author = {Landau, G M and Vishkin, U},
	urldate = {2014-03-24},
	date = {1986},
	keywords = {chrisstring},
	file = {ACM Full Text PDF:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/PG2F84I5/Landau and Vishkin - 1986 - Introducing Efficient Parallelism into Approximate.pdf:application/pdf}
}

@article{landau_fast_1988,
	title = {Fast string matching with k differences},
	volume = {37},
	issn = {0022-0000},
	url = {http://www.sciencedirect.com/science/article/pii/0022000088900451},
	doi = {10.1016/0022-0000(88)90045-1},
	abstract = {Consider the string matching problem where differences between characters of the pattern and characters of the text are allowed. Each difference is due to either a mismatch between a character of the text and a character of the pattern or a superfluous character in the text or a superfluous character in the pattern. Given a text of length n, a pattern of length m, and an integer k, we present an algorithm for finding all occurrences of the pattern in the text, each with at most kdifferences. It runs in O(m+nk2) time for an alphabet whose size is fixed. For general input the algorithm requires O(m log m +nk2) time. In both cases the space requirement is O(m).},
	pages = {63-78},
	number = {1},
	journaltitle = {Journal of Computer and System Sciences},
	shortjournal = {Journal of Computer and System Sciences},
	author = {Landau, Gad M. and Vishkin, Uzi},
	urldate = {2014-03-24},
	date = {1988-08},
	keywords = {chrisstring},
	file = {ScienceDirect Full Text PDF:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/VGAGD7SN/Landau and Vishkin - 1988 - Fast string matching with k differences.pdf:application/pdf;ScienceDirect Snapshot:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/CEC5UB8C/0022000088900451.html:text/html}
}

@article{landau_fast_1989,
	title = {Fast parallel and serial approximate string matching},
	volume = {10},
	issn = {0196-6774},
	url = {http://www.sciencedirect.com/science/article/pii/0196677489900102},
	doi = {10.1016/0196-6774(89)90010-2},
	abstract = {Consider the string matching problem, where differences between characters of the pattern and characters of the text are allowed. Each difference is due to either a mismatch between a character of the text and a character of the pattern, or a superfluous character in the text, or a superfluous character in the pattern. Given a text of lenght n, a pattern of length m and an integer k, we present parallel and serial algorthms for finding all occurrences of the pattern in the text with at most k differences. The parallel algorithm requires O(log m + k) time using n processors. The serial algorithm runs in O(nk) time for an alphabet whose size is fixed.},
	pages = {157-169},
	number = {2},
	journaltitle = {Journal of Algorithms},
	shortjournal = {Journal of Algorithms},
	author = {Landau, Gad M and Vishkin, Uzi},
	urldate = {2014-03-24},
	date = {1989-06},
	keywords = {chrisstring},
	file = {ScienceDirect Snapshot:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/NZAU6UVS/0196677489900102.html:text/html}
}

@article{galil_improved_1990,
	title = {An Improved Algorithm for Approximate String Matching},
	volume = {19},
	issn = {0097-5397},
	url = {http://dx.doi.org/10.1137/0219067},
	doi = {10.1137/0219067},
	pages = {989–999},
	number = {6},
	journaltitle = {{SIAM} J. Comput.},
	author = {Galil, Zvi and Park, Kunsoo},
	urldate = {2014-03-24},
	date = {1990-11},
	keywords = {chrisstring},
	file = {improved_approximate_string_algorithms.pdf:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/F56RH4QX/improved_approximate_string_algorithms.pdf:application/pdf}
}

@article{manber_suffix_1993,
	title = {Suffix Arrays: A New Method for On-Line String Searches},
	volume = {22},
	issn = {0097-5397, 1095-7111},
	url = {http://epubs.siam.org/doi/abs/10.1137/0222058},
	doi = {10.1137/0222058},
	shorttitle = {Suffix Arrays},
	pages = {935-948},
	number = {5},
	journaltitle = {{SIAM} Journal on Computing},
	author = {Manber, Udi and Myers, Gene},
	urldate = {2014-03-24},
	date = {1993-10},
	langid = {english},
	keywords = {chrisstring},
	file = {Suffix Arrays: A New Method for On-Line String Searches : SIAM Journal on Computing: Vol. 22, No. 5 (Society for Industrial and Applied Mathematics):/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/CBTSSP2X/0222058.html:text/html;suffixarrays.pdf:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/JDTM9X9Z/suffixarrays.pdf:application/pdf}
}

@incollection{ukkonen_approximate_1993,
	title = {Approximate string-matching over suffix trees},
	rights = {©1993 Springer-Verlag},
	isbn = {978-3-540-56764-6, 978-3-540-47732-7},
	url = {http://link.springer.com/chapter/10.1007/BFb0029808},
	series = {Lecture Notes in Computer Science},
	abstract = {The classical approximate string-matching problem of finding the locations of approximate occurrences P′ of pattern string P in text string T such that the edit distance between P and P′ is ≤ k is considered. We concentrate on the special case in which T is available for preprocessing before the searches with varying P and k. It is shown how the searches can be done fast using the suffix tree of T augmented with the suffix links as the preprocessed form of T and applying dynamic programming over the tree. Three variations of the search algorithm are developed with running times O(mq + n), O(mq log q + size of the output), and O(m 2 q + size of the output). Here n = {¦T¦}, m = {¦P¦}, and q varies depending on the problem instance between 0 and n. In the case of the unit cost edit distance it is shown that q = O(min(n, m k+1¦∑¦ k )) where ∑ is the alphabet.},
	pages = {228-242},
	number = {684},
	booktitle = {Combinatorial Pattern Matching},
	publisher = {Springer Berlin Heidelberg},
	author = {Ukkonen, Esko},
	editor = {Apostolico, Alberto and Crochemore, Maxime and Galil, Zvi and Manber, Udi},
	urldate = {2014-03-24},
	date = {1993},
	keywords = {Algorithm Analysis and Problem Complexity, chrisstring, Coding and Information Theory, Combinatorics, Document Preparation and Text Processing, Information Storage and Retrieval, Pattern Recognition},
	file = {Full Text PDF:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/X9N4KN7B/Ukkonen - 1993 - Approximate string-matching over suffix trees.pdf:application/pdf;Snapshot:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/IWJPBIQ4/BFb0029808.html:text/html}
}

@article{ukkonen_-line_1995,
	title = {On-line construction of suffix trees},
	volume = {14},
	issn = {0178-4617, 1432-0541},
	url = {http://link.springer.com/article/10.1007/BF01206331},
	doi = {10.1007/BF01206331},
	abstract = {An on-line algorithm is presented for constructing the suffix tree for a given string in time linear in the length of the string. The new algorithm has the desirable property of processing the string symbol by symbol from left to right. It always has the suffix tree for the scanned part of the string ready. The method is developed as a linear-time version of a very simple algorithm for (quadratic size) suffixtries. Regardless of its quadratic worst case this latter algorithm can be a good practical method when the string is not too long. Another variation of this method is shown to give, in a natural way, the well-known algorithms for constructing suffix automata ({DAWGs).}},
	pages = {249-260},
	number = {3},
	journaltitle = {Algorithmica},
	shortjournal = {Algorithmica},
	author = {Ukkonen, E.},
	urldate = {2014-03-24},
	date = {1995-09-01},
	langid = {english},
	keywords = {chrisstring, Computer Hardware, Computer Science, general, Computer Systems Organization and Communication Networks, Data Structures, Cryptology and Information Theory, {DAWG}, Linear-time algorithm, Software {Engineering/Programming} and Operating Systems, Suffix automaton, Suffix tree, Suffix trie, Theory of Computation},
	file = {Full Text PDF:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/DIXBCQ28/Ukkonen - 1995 - On-line construction of suffix trees.pdf:application/pdf;Snapshot:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/8SWWK2FZ/BF01206331.html:text/html}
}

@inproceedings{bentley_fast_1997,
	location = {Philadelphia, {PA}, {USA}},
	title = {Fast Algorithms for Sorting and Searching Strings},
	isbn = {0-89871-390-0},
	url = {http://dl.acm.org/citation.cfm?id=314161.314321},
	series = {{SODA} '97},
	pages = {360–369},
	booktitle = {Proceedings of the Eighth Annual {ACM-SIAM} Symposium on Discrete Algorithms},
	publisher = {Society for Industrial and Applied Mathematics},
	author = {Bentley, Jon L. and Sedgewick, Robert},
	urldate = {2014-03-24},
	date = {1997},
	keywords = {chrisstring},
	file = {ACM Full Text PDF:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/2KIX9W5G/Bentley and Sedgewick - 1997 - Fast Algorithms for Sorting and Searching Strings.pdf:application/pdf}
}

@book{gusfield_algorithms_1997,
	title = {Algorithms on Strings, Trees and Sequences: Computer Science and Computational Biology},
	isbn = {9780521585194},
	shorttitle = {Algorithms on Strings, Trees and Sequences},
	abstract = {Traditionally an area of study in computer science, string algorithms have, in recent years, become an increasingly important part of biology, particularly genetics. This volume is a comprehensive look at computer algorithms for string processing. In addition to pure computer science, Gusfield adds extensive discussions on biological problems that are cast as string problems and on methods developed to solve them. This text emphasizes the fundamental ideas and techniques central to today's applications. New approaches to this complex material simplify methods that up to now have been for the specialist alone. With over 400 exercises to reinforce the material and develop additional topics, the book is suitable as a text for graduate or advanced undergraduate students in computer science, computational biology, or bio-informatics.},
	pagetotal = {556},
	publisher = {Cambridge University Press},
	author = {Gusfield, Dan},
	date = {1997-05-28},
	langid = {english},
	keywords = {chrisstring, Computers / General, Computers / Optical Data Processing, Computers / Programming / Algorithms, Computers / Programming / General, Mathematics / Discrete Mathematics}
}

@article{abouelhoda_replacing_2004,
	title = {Replacing suffix trees with enhanced suffix arrays},
	volume = {2},
	issn = {1570-8667},
	url = {http://www.sciencedirect.com/science/article/pii/S1570866703000650},
	doi = {10.1016/S1570-8667(03)00065-0},
	abstract = {The suffix tree is one of the most important data structures in string processing and comparative genomics. However, the space consumption of the suffix tree is a bottleneck in large scale applications such as genome analysis. In this article, we will overcome this obstacle. We will show how every algorithm that uses a suffix tree as data structure can systematically be replaced with an algorithm that uses an enhanced suffix array and solves the same problem in the same time complexity. The generic name enhanced suffix array stands for data structures consisting of the suffix array and additional tables. Our new algorithms are not only more space efficient than previous ones, but they are also faster and easier to implement.},
	pages = {53-86},
	number = {1},
	journaltitle = {Journal of Discrete Algorithms},
	shortjournal = {Journal of Discrete Algorithms},
	author = {Abouelhoda, Mohamed Ibrahim and Kurtz, Stefan and Ohlebusch, Enno},
	urldate = {2014-03-24},
	date = {2004-03},
	keywords = {chrisstring, Genome comparison, pattern matching, Repeat analysis, Suffix array, Suffix tree},
	file = {ScienceDirect Full Text PDF:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/5BBDTD4V/Abouelhoda et al. - 2004 - Replacing suffix trees with enhanced suffix arrays.pdf:application/pdf;ScienceDirect Snapshot:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/A9QNHBV6/S1570866703000650.html:text/html}
}

@article{farrar_striped_2007,
	title = {Striped {Smith–Waterman} speeds database searches six times over other {SIMD} implementations},
	volume = {23},
	issn = {1367-4803, 1460-2059},
	url = {http://bioinformatics.oxfordjournals.org/content/23/2/156},
	doi = {10.1093/bioinformatics/btl582},
	abstract = {Motivation: The only algorithm guaranteed to find the optimal local alignment is the {Smith–Waterman.} It is also one of the slowest due to the number of computations required for the search. To speed up the algorithm, Single-Instruction Multiple-Data ({SIMD)} instructions have been used to parallelize the algorithm at the instruction level.
Results: A faster implementation of the {Smith–Waterman} algorithm is presented. This algorithm achieved 2–8 times performance improvement over other {SIMD} based {Smith–Waterman} implementations. On a 2.0 {GHz} Xeon Core 2 Duo processor, speeds of {\textgreater}3.0 billion cell updates/s were achieved.
{Availability:http://farrar.michael.googlepages.com/Smith-waterman}
Contact:farrar.michael@gmail.com},
	pages = {156-161},
	number = {2},
	journaltitle = {Bioinformatics},
	shortjournal = {Bioinformatics},
	author = {Farrar, Michael},
	urldate = {2014-03-24},
	date = {2007},
	langid = {english},
	note = {{PMID:} 17110365},
	keywords = {chrisstring},
	file = {Full Text PDF:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/SABKTTWT/Farrar - 2007 - Striped Smith–Waterman speeds database searches si.pdf:application/pdf;Snapshot:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/NUQ3NNJX/156.html:text/html}
}

@article{rognes_faster_2011,
	title = {Faster Smith-Waterman database searches with inter-sequence {SIMD} parallelisation},
	volume = {12},
	rights = {2011 Rognes; licensee {BioMed} Central Ltd.},
	issn = {1471-2105},
	url = {http://www.biomedcentral.com/1471-2105/12/221/abstract},
	doi = {10.1186/1471-2105-12-221},
	abstract = {The Smith-Waterman algorithm for local sequence alignment is more sensitive than heuristic methods for database searching, but also more time-consuming. The fastest approach to parallelisation with {SIMD} technology has previously been described by Farrar in 2007. The aim of this study was to explore whether further speed could be gained by other approaches to parallelisation.
{PMID:} 21631914},
	pages = {221},
	number = {1},
	journaltitle = {{BMC} Bioinformatics},
	author = {Rognes, Torbjørn},
	urldate = {2014-03-24},
	date = {2011-06-01},
	langid = {english},
	note = {{PMID:} 21631914},
	keywords = {chrisstring},
	file = {Full Text PDF:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/B3XUBZ7Q/Rognes - 2011 - Faster Smith-Waterman database searches with inter.pdf:application/pdf;Snapshot:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/TV3M9DRX/221.html:text/html}
}

@article{needleman_general_1970,
	title = {A general method applicable to the search for similarities in the amino acid sequence of two proteins},
	volume = {48},
	issn = {0022-2836},
	url = {http://www.sciencedirect.com/science/article/pii/0022283670900574},
	doi = {10.1016/0022-2836(70)90057-4},
	abstract = {A computer adaptable method for finding similarities in the amino acid sequences of two proteins has been developed. From these findings it is possible to determine whether significant homology exists between the proteins. This information is used to trace their possible evolutionary development.
The maximum match is a number dependent upon the similarity of the sequences. One of its definitions is the largest number of amino acids of one protein that can be matched with those of a second protein allowing for all possible interruptions in either of the sequences. While the interruptions give rise to a very large number of comparisons, the method efficiently excludes from consideration those comparisons that cannot contribute to the maximum match.
Comparisons are made from the smallest unit of significance, a pair of amino acids, one from each protein. All possible pairs are represented by a two-dimensional array, and all possible comparisons are represented by pathways through the array. For this maximum match only certain of the possible pathways must be evaluated. A numerical value, one in this case, is assigned to every cell in the array representing like amino acids. The maximum match is the largest number that would result from summing the cell values of every pathway.},
	pages = {443-453},
	number = {3},
	journaltitle = {Journal of Molecular Biology},
	shortjournal = {Journal of Molecular Biology},
	author = {Needleman, Saul B. and Wunsch, Christian D.},
	urldate = {2014-04-16},
	date = {1970-03-28},
	keywords = {chrisstring},
	file = {ScienceDirect Full Text PDF:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/CSDPRSXR/Needleman and Wunsch - 1970 - A general method applicable to the search for simi.pdf:application/pdf;ScienceDirect Snapshot:/Users/cmhill/Library/Application Support/Zotero/Profiles/zglkxv0v.default/zotero/storage/DN8RBX8K/0022283670900574.html:text/html}
}